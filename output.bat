@echo off
echo token=BOT_TOKEN>> ".env"
echo prefix=PREFIX>> ".env"
mkdir "commands"
cd "commands"
echo function clean(text){>> "eval.js"
echo 	if (typeof text === 'string') return text.replace(/`/g, '`'+String.fromCharCode(8203)).replace(/@/g, '@'+String.fromCharCode(8203));>> "eval.js"
echo 	return text;>> "eval.js"
echo }>> "eval.js"
echo. >> "eval.js"
echo module.exports = {>> "eval.js"
echo 	name: 'eval',>> "eval.js"
echo 	description: 'Execute code.',>> "eval.js"
echo 	run: async (msg, args) =^> {>> "eval.js"
echo 		let app = await msg.client.fetchApplication();>> "eval.js"
echo 		if (msg.author.id !== app.owner.id) return msg.reply('You do not have access to this command!');>> "eval.js"
echo 		//Below this line indirectly from https://github.com/AnIdiotsGuide/discordjs-bot-guide/blob/master/examples/making-an-eval-command.md>> "eval.js"
echo 		try {>> "eval.js"
echo 			let evaled = eval(args.join(' '));>> "eval.js"
echo 			if (typeof evaled !== 'string') evaled = require('util').inspect(evaled);>> "eval.js"
echo 			msg.channel.send(clean(evaled), {code:'xl'});>> "eval.js"
echo 		} catch(err){>> "eval.js"
echo 			msg.channel.send('`ERROR` ```xl\n'+clean(err)+'\n```');>> "eval.js"
echo 		}>> "eval.js"
echo 	}>> "eval.js"
echo }>> "eval.js"
echo module.exports = {>> "example.js"
echo 	name: 'example',>> "example.js"
echo 	description: 'An example command.',>> "example.js"
echo 	aliases: ['test'], //Optional>> "example.js"
echo 	args: [ //Only used when registering a slash command. To update, remove the command name from /data/registeredCommands.json>> "example.js"
echo 		{>> "example.js"
echo 			name: 'Arg',>> "example.js"
echo 			description: 'An example argument.',>> "example.js"
echo 			type: 3, //Types at https://discord.com/developers/docs/interactions/slash-commands#applicationcommandoptiontype>> "example.js"
echo 			required: false,>> "example.js"
echo 			choices: [ //Optional>> "example.js"
echo 				{>> "example.js"
echo 					name: 'Choice 1',>> "example.js"
echo 					value: 1>> "example.js"
echo 				},>> "example.js"
echo 				{>> "example.js"
echo 					name: 'Choice 2',>> "example.js"
echo 					value: 2>> "example.js"
echo 				}>> "example.js"
echo 			]>> "example.js"
echo 		}>> "example.js"
echo 	],>> "example.js"
echo 	run: (msg, args) =^> {>> "example.js"
echo 		msg.channel.send('I have recieved these args: `'+args.join(', ')+'`');>> "example.js"
echo 	},>> "example.js"
echo 	runSlash: (interaction, client) =^> { //Optional>> "example.js"
echo 		const respond = require('./functions/slashRespond.js');>> "example.js"
echo 		interaction.respond(4, 'I have recieved your message.'); //Types at https://discord.com/developers/docs/interactions/slash-commands#interaction-response-interactionresponsetype>> "example.js"
echo 	}>> "example.js"
echo }>> "example.js"
echo ﻿const fs = require('fs');>> "help.js"
echo. >> "help.js"
echo require('dotenv').config();>> "help.js"
echo. >> "help.js"
echo module.exports = {>> "help.js"
echo 	name: 'help',>> "help.js"
echo 	description: 'Displays a list of the commands.',>> "help.js"
echo 	run: async msg =^> {>> "help.js"
echo 		let pageSize = 6; // Must be below 25, I'd recommend 6, 9, or 12>> "help.js"
echo. >> "help.js"
echo 		let commands = fs.readdirSync('./commands');>> "help.js"
echo 		if (pageSize ^> 25) pageSize = 25;>> "help.js"
echo 		if (commands.length ^<= (pageSize + 3 - (pageSize % 3) - (pageSize % 25))) return msg.channel.send({>> "help.js"
echo 			embed: {>> "help.js"
echo 				title: 'Help for '+msg.client.user.username,>> "help.js"
echo 				color: 0x5555FF,>> "help.js"
echo 				fields: commands.map(c =^> {>> "help.js"
echo 					let cmd = require('./'+c);>> "help.js"
echo 					return {>> "help.js"
echo 						name: process.env.prefix+cmd.name,>> "help.js"
echo 						value: cmd.description+((cmd.aliases) ? '\n***Aliases:** '+cmd.aliases.join(', ')+'*':''),>> "help.js"
echo 						inline: true>> "help.js"
echo 					}>> "help.js"
echo 				}),>> "help.js"
echo 				footer: {>> "help.js"
echo 					text: 'Discord Bot Template by a.bakedpotato'>> "help.js"
echo 				}>> "help.js"
echo 			}>> "help.js"
echo 		});>> "help.js"
echo. >> "help.js"
echo 		let pages = [];>> "help.js"
echo 		let page = 0;>> "help.js"
echo. >> "help.js"
echo 		for (let i = 0; i ^<= commands.length; i += pageSize){>> "help.js"
echo 			pages.push({>> "help.js"
echo 				title: 'Help for '+msg.client.user.username,>> "help.js"
echo 				color: 0x5555FF,>> "help.js"
echo 				fields: commands.slice(i, i+pageSize).map(c =^> {>> "help.js"
echo 					let cmd = require('./'+c);>> "help.js"
echo 					return {>> "help.js"
echo 						name: process.env.prefix+cmd.name,>> "help.js"
echo 						value: cmd.description+((cmd.aliases) ? '\n***Aliases:** '+cmd.aliases.join(', ')+'*':''),>> "help.js"
echo 						inline: true>> "help.js"
echo 					}>> "help.js"
echo 				}),>> "help.js"
echo 				footer: {>> "help.js"
echo 					text: 'Page '+(pages.length+1)>> "help.js"
echo 				}>> "help.js"
echo 			});>> "help.js"
echo 		}>> "help.js"
echo 		pages.forEach(p =^> p.footer.text += ' of '+pages.length);>> "help.js"
echo. >> "help.js"
echo 		let emojis = ['◀', '▶'];>> "help.js"
echo 		if (pages.length ^> 5) emojis = ['⏮', '◀', '▶', '⏭'];>> "help.js"
echo 		if (pages.length ^> 10) emojis = ['⏮', '⏪', '◀', '▶', '⏩', '⏭'];>> "help.js"
echo. >> "help.js"
echo 		let bMsg = await msg.channel.send({embed: pages[page]});>> "help.js"
echo 		let rCollect = bMsg.createReactionCollector((r, u) =^> emojis.includes(r.emoji.name) ^&^& u.id === msg.author.id, { time: 600000 });>> "help.js"
echo 		emojis.forEach(e =^> bMsg.react(e));>> "help.js"
echo. >> "help.js"
echo 		rCollect.on('collect', r =^> {>> "help.js"
echo 			if (msg.channel.type === 'text') bMsg.reactions.resolve(r.emoji.name).users.remove(msg.author.id);>> "help.js"
echo 			switch (r.emoji.name){>> "help.js"
echo 				case '⏮':>> "help.js"
echo 					page = 0;>> "help.js"
echo 					break;>> "help.js"
echo 				case '⏪':>> "help.js"
echo 					page -= 5;>> "help.js"
echo 					break;>> "help.js"
echo 				case '◀':>> "help.js"
echo 					page--;>> "help.js"
echo 					break;>> "help.js"
echo 				case '▶':>> "help.js"
echo 					page++;>> "help.js"
echo 					break;>> "help.js"
echo 				case '⏩':>> "help.js"
echo 					page += 5;>> "help.js"
echo 					break;>> "help.js"
echo 				case '⏭':>> "help.js"
echo 					page = pages.length-1;>> "help.js"
echo 					break;>> "help.js"
echo 			}>> "help.js"
echo 			if (page ^< 0) page = 0;>> "help.js"
echo 			if (page ^>= pages.length) page = pages.length-1;>> "help.js"
echo 			bMsg.edit({embed: pages[page]});>> "help.js"
echo 		});>> "help.js"
echo 	}>> "help.js"
echo }>> "help.js"
cd ..
mkdir "data"
cd "data"
echo []>> "registeredCommands.json"
cd ..
echo //Template made by a.bakedpotato>> "index.js"
echo const Discord = require('discord.js');>> "index.js"
echo const client = new Discord.Client();>> "index.js"
echo const axios = require('axios');>> "index.js"
echo const fs = require('fs');>> "index.js"
echo. >> "index.js"
echo require('dotenv').config();>> "index.js"
echo. >> "index.js"
echo let commands = {};>> "index.js"
echo. >> "index.js"
echo client.on('ready', async () =^> {>> "index.js"
echo 	console.log(`${client.user.tag} is online!`);>> "index.js"
echo 	let cmds = JSON.parse(fs.readFileSync('./data/registeredCommands.json'));>> "index.js"
echo 	for (const command of fs.readdirSync('./commands')){>> "index.js"
echo 		let cmd = require('./commands/'+command);>> "index.js"
echo 		commands[cmd.name] = cmd;>> "index.js"
echo 		console.log('Registered command: '+cmd.name);>> "index.js"
echo 		if (cmd.aliases){>> "index.js"
echo 			for (const alias of cmd.aliases){>> "index.js"
echo 				commands[alias] = cmd;>> "index.js"
echo 				console.log('Registered command alias: '+alias);>> "index.js"
echo 			}>> "index.js"
echo 		}>> "index.js"
echo. >> "index.js"
echo 		if (cmd.runSlash ^&^& !cmds.includes(cmd.name)){>> "index.js"
echo 			cmds.push(cmd.name);>> "index.js"
echo 			let slashCommand = await axios.post('https://discord.com/api/v8/applications/'+client.user.id+'/commands',>> "index.js"
echo 				{>> "index.js"
echo 					name: cmd.name,>> "index.js"
echo 					description: cmd.description,>> "index.js"
echo 					options: args ^|^| []>> "index.js"
echo 				},>> "index.js"
echo 				{>> "index.js"
echo 					headers: {>> "index.js"
echo 						'Authorization': 'Bot '+client.token>> "index.js"
echo 					}>> "index.js"
echo 				}>> "index.js"
echo 			).catch(console.log);>> "index.js"
echo 			if (slashCommand.data.id){>> "index.js"
echo 				console.log('Successfully registered command: /'+cmd.name)>> "index.js"
echo 			}>> "index.js"
echo 		}>> "index.js"
echo 	}>> "index.js"
echo 	fs.writeFileSync('./data/registeredCommands.json', JSON.stringify(cmds, null, 4));>> "index.js"
echo });>> "index.js"
echo. >> "index.js"
echo client.on('message', msg =^> {>> "index.js"
echo 	let prefix = process.env.prefix;>> "index.js"
echo 	if (msg.author.bot ^|^| !msg.content.toLowerCase().startsWith(prefix.toLowerCase())) return;>> "index.js"
echo 	let args = msg.content.substr(prefix.length).split(/\s+/g);>> "index.js"
echo 	let cmd = args.shift();>> "index.js"
echo 	if (!commands[cmd]) return;>> "index.js"
echo 	commands[cmd].run(msg, args);>> "index.js"
echo });>> "index.js"
echo. >> "index.js"
echo client.ws.on('INTERACTION_CREATE', interaction =^> {>> "index.js"
echo 	if (!commands[interaction.data.name]) return;>> "index.js"
echo 	interaction.respond = (type, response) =^> {>> "index.js"
echo 		if (typeof response === 'string') response = {content: response};>> "index.js"
echo 		axios.post('https://discord.com/api/v8/interactions/'+interaction.id+'/'+interaction.token+'/callback', {>> "index.js"
echo 			type: type,>> "index.js"
echo 			data: response>> "index.js"
echo 		});>> "index.js"
echo 	}>> "index.js"
echo 	commands[interaction.data.name].runSlash(interaction, bot);>> "index.js"
echo });>> "index.js"
echo. >> "index.js"
echo client.login(process.env.token);>> "index.js"
echo del output.bat>> "install.bat"
echo npm i discord.js axios dotenv>> "install.bat"
echo 1. Edit .env>> "readme.txt"
echo 2. Add commands to the commands folder>> "readme.txt"
echo 3. Run start.bat>> "readme.txt"
echo node .>> "start.bat"
install.bat